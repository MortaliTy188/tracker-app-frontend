import axios from "axios";

// API client for achievements operations
const API_BASE_URL = "http://localhost:3000";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
const getToken = () => {
  return localStorage.getItem("token") || sessionStorage.getItem("token");
};

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞
const apiClient = axios.create({
  baseURL: API_BASE_URL,
});

apiClient.interceptors.request.use(
  (config) => {
    const token = getToken();
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
 */
export const getAchievementsProgress = async () => {
  try {
    const response = await apiClient.get("/api/achievements/progress");

    if (response.data && response.data.success) {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      const progressData = response.data.data?.progress || [];
      const transformedData = progressData.map((item) => ({
        id: item.achievement.id,
        name: item.achievement.name,
        description: item.achievement.description,
        icon: item.achievement.icon,
        category: item.achievement.type,
        isCompleted: item.is_completed,
        progress: {
          current: item.progress,
          target: item.max_progress,
        },
        percentage: item.percentage,
        earnedAt: item.completed_at,
        rarity: item.achievement.rarity,
        points: item.achievement.points,
      }));

      return {
        success: true,
        data: transformedData,
        message: response.data.message || "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã",
      };
    } else {
      return {
        success: false,
        message: response.data?.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π",
        data: getFallbackAchievements(),
      };
    }
  } catch (error) {
    console.error("Error fetching achievements progress:", error);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    return {
      success: false,
      message:
        error.response?.data?.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
      data: getFallbackAchievements(),
    };
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
 * @param {number|string} achievementId - ID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
 */
export const getAchievementDetails = async (achievementId) => {
  try {
    const response = await apiClient.get(`/api/achievements/${achievementId}`);

    if (response.data && response.data.success) {
      return {
        success: true,
        data: response.data.data,
        message: response.data.message || "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ",
      };
    } else {
      return {
        success: false,
        message: response.data?.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
        data: null,
      };
    }
  } catch (error) {
    console.error("Error fetching achievement details:", error);
    return {
      success: false,
      message:
        error.response?.data?.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ",
      data: null,
    };
  }
};

/**
 * Fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞)
 * @returns {Array} –ú–∞—Å—Å–∏–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
 */
const getFallbackAchievements = () => [
  {
    id: 1,
    name: "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏",
    description: "–°–æ–∑–¥–∞–ª–∏ –ø–µ—Ä–≤—É—é —Ü–µ–ª—å –æ–±—É—á–µ–Ω–∏—è",
    icon: "üèÜ",
    category: "beginner",
    isCompleted: true,
    progress: {
      current: 1,
      target: 1,
    },
    earnedAt: "2024-06-15T10:30:00Z",
    rarity: "common",
    points: 10,
  },
  {
    id: 2,
    name: "–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü",
    description: "7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
    icon: "üèÉ",
    category: "consistency",
    isCompleted: true,
    progress: {
      current: 7,
      target: 7,
    },
    earnedAt: "2024-06-16T18:45:00Z",
    rarity: "uncommon",
    points: 25,
  },
  {
    id: 3,
    name: "–¶–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω—ã–π",
    description: "–ó–∞–≤–µ—Ä—à–∏–ª–∏ 10 —Ü–µ–ª–µ–π",
    icon: "üéØ",
    category: "goals",
    isCompleted: false,
    progress: {
      current: 5,
      target: 10,
    },
    earnedAt: null,
    rarity: "rare",
    points: 50,
  },
  {
    id: 4,
    name: "–≠–∫—Å–ø–µ—Ä—Ç",
    description: "100 —á–∞—Å–æ–≤ –æ–±—É—á–µ–Ω–∏—è",
    icon: "üìö",
    category: "learning",
    isCompleted: false,
    progress: {
      current: 42,
      target: 100,
    },
    earnedAt: null,
    rarity: "epic",
    points: 100,
  },
  {
    id: 5,
    name: "–ú–∞—Å—Ç–µ—Ä",
    description: "–ó–∞–≤–µ—Ä—à–∏–ª–∏ 50 —Ü–µ–ª–µ–π",
    icon: "üëë",
    category: "goals",
    isCompleted: false,
    progress: {
      current: 5,
      target: 50,
    },
    earnedAt: null,
    rarity: "legendary",
    points: 250,
  },
  {
    id: 6,
    name: "–õ–µ–≥–µ–Ω–¥–∞",
    description: "30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
    icon: "‚≠ê",
    category: "consistency",
    isCompleted: false,
    progress: {
      current: 7,
      target: 30,
    },
    earnedAt: null,
    rarity: "legendary",
    points: 500,
  },
];

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
 */
export const getAchievementsStats = async () => {
  try {
    const response = await apiClient.get("/api/achievements/stats");
    if (response.data && response.data.success) {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      const statsData = response.data.data?.stats;
      const transformedStats = {
        totalAchievements: statsData?.total || 0,
        completedAchievements: statsData?.completed || 0,
        completionRate: statsData?.percentage || 0,
        earnedPoints: statsData?.points || 0,
      };

      return {
        success: true,
        data: transformedStats,
        message: response.data.message || "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞",
      };
    } else {
      return {
        success: false,
        message: response.data?.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
        data: getFallbackStats(),
      };
    }
  } catch (error) {
    console.error("Error fetching achievements stats:", error);
    return {
      success: false,
      message:
        error.response?.data?.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
      data: getFallbackStats(),
    };
  }
};

/**
 * Fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
 */
const getFallbackStats = () => ({
  totalAchievements: 6,
  completedAchievements: 2,
  earnedPoints: 35,
  completionRate: 33.33,
});
