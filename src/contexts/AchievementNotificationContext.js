import React, {
  createContext,
  useContext,
  useState,
  useEffect,
  useCallback,
} from "react";
import { useSocket } from "../hooks/useSocket";

const AchievementNotificationContext = createContext();

/**
 * –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
 */
export const AchievementNotificationProvider = ({ children }) => {
  const [notifications, setNotifications] = useState([]);
  const [currentNotification, setCurrentNotification] = useState(null);
  const [isNotificationOpen, setIsNotificationOpen] = useState(false);
  const socketData = useSocket(); // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å socket –∏ –º–µ—Ç–æ–¥–∞–º–∏

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
  const handleAchievementNotification = useCallback((data) => {
    console.log("üéâ –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏:", data);

    // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
    const notification = {
      id: Date.now() + Math.random(), // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
      ...data,
      timestamp: new Date(),
    };

    setNotifications((prev) => [...prev, notification]);
  }, []);

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è Socket.IO
  useEffect(() => {
    const socket = socketData?.socket; // –ò–∑–≤–ª–µ–∫–∞–µ–º socket –æ–±—ä–µ–∫—Ç

    if (socket && socketData.isConnected) {
      console.log(
        "üîå Socket –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ achievement_notification"
      );
      console.log("üîå Socket object:", socket);
      console.log("üîå Socket connected:", socket.connected);
      console.log("üîå Socket id:", socket.id);

      socket.on("achievement_notification", handleAchievementNotification);

      return () => {
        console.log("üîå –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç achievement_notification");
        socket.off("achievement_notification", handleAchievementNotification);
      };
    } else {
      console.log("‚ùå Socket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ –≥–æ—Ç–æ–≤");
      console.log("üîå Socket data:", socketData);
    }
  }, [
    socketData?.socket,
    socketData?.isConnected,
    handleAchievementNotification,
  ]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  useEffect(() => {
    console.log(
      "üîÑ Notifications queue changed:",
      notifications.length,
      "isOpen:",
      isNotificationOpen
    );
    if (notifications.length > 0 && !isNotificationOpen) {
      const nextNotification = notifications[0];
      console.log("üìÑ Processing notification:", nextNotification);
      setCurrentNotification(nextNotification);
      setIsNotificationOpen(true);

      // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
      setNotifications((prev) => prev.slice(1));
    }
  }, [notifications, isNotificationOpen]);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const closeNotification = useCallback(() => {
    console.log("‚ùå Closing notification");
    setIsNotificationOpen(false);
    setCurrentNotification(null);
  }, []);

  // –†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
  const sendTestNotification = useCallback(
    (achievementData) => {
      console.log("üß™ Sending test notification:", achievementData);
      const testNotification = {
        type: "achievement_earned",
        achievement: {
          id: Date.now(),
          name: "–¢–µ—Å—Ç–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ",
          description: "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏",
          icon: "celebration",
          points: 100,
          rarity: "epic",
          earnedAt: new Date(),
          ...achievementData,
        },
        message: "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!",
      };

      handleAchievementNotification(testNotification);
    },
    [handleAchievementNotification]
  );

  const value = {
    currentNotification,
    isNotificationOpen,
    closeNotification,
    sendTestNotification,
    notificationsCount: notifications.length,
  };

  return (
    <AchievementNotificationContext.Provider value={value}>
      {children}
    </AchievementNotificationContext.Provider>
  );
};

/**
 * –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
 */
export const useAchievementNotifications = () => {
  const context = useContext(AchievementNotificationContext);
  if (!context) {
    throw new Error(
      "useAchievementNotifications must be used within AchievementNotificationProvider"
    );
  }
  return context;
};

export default AchievementNotificationProvider;
