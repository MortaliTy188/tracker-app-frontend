import React, { useState } from "react";
import {
  Dialog,
  DialogTitle,
  DialogContent,
  Box,
  TextField,
  List,
  ListItem,
  Avatar,
  Typography,
  Button,
  Chip,
  LinearProgress,
  Alert,
  Pagination,
} from "@mui/material";
import { PersonAdd, Check, Close } from "@mui/icons-material";

const FindFriendsDialog = ({
  open,
  onClose,
  allUsers,
  usersLoading,
  usersError,
  userSearch,
  onUserSearchChange,
  paginatedUsers,
  usersPage,
  totalUsersPages,
  onUsersPageChange,
  onSendFriendRequest,
  onAcceptFriendRequest,
  onDeclineFriendRequest,
  showSuccess,
  showError,
  loadFriends,
  loadPendingRequests,
  fetchAllUsers,
}) => {
  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  const [localFriendshipUpdates, setLocalFriendshipUpdates] = useState({});

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –¥—Ä—É–∂–±—ã —Å —É—á–µ—Ç–æ–º –ª–æ–∫–∞–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  const getFriendshipStatus = (user) => {
    const hasLocalUpdate = localFriendshipUpdates[user.id];
    const originalStatus = user.friendship?.status;
    const finalStatus = hasLocalUpdate
      ? localFriendshipUpdates[user.id]
      : originalStatus;

    if (hasLocalUpdate) {
      console.log(
        `üîÑ User ${user.id} (${user.name}): Original status: ${originalStatus}, Local update: ${hasLocalUpdate}, Final: ${finalStatus}`
      );
    }

    if (localFriendshipUpdates[user.id]) {
      return {
        ...user.friendship,
        status: localFriendshipUpdates[user.id],
      };
    }
    return user.friendship;
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π –ª–æ–∫–∞–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  const handleClose = () => {
    setLocalFriendshipUpdates({});
    onClose();
  };
  const handleSendRequest = async (userId) => {
    console.log("üü° HandleSendRequest - User ID:", userId);

    // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - —Å—Ä–∞–∑—É –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "sent_request"
    setLocalFriendshipUpdates((prev) => {
      console.log("üü° Setting optimistic update for user:", userId);
      return {
        ...prev,
        [userId]: "sent_request",
      };
    });

    const result = await onSendFriendRequest(userId);
    console.log("üü° Friend request result:", result);

    if (result.success) {
      showSuccess("–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");

      // –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      console.log("üü° Fetching updated users...");
      await fetchAllUsers();
      console.log("üü° Users updated");

      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±–Ω–æ–≤–∏–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      setTimeout(() => {
        console.log("üü° Checking if server data updated for user:", userId);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const currentUser = paginatedUsers.find((u) => u.id === userId);
        if (currentUser && currentUser.friendship?.status === "sent_request") {
          console.log("üü° Server data updated, clearing local update");
          // –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
          setLocalFriendshipUpdates((prev) => {
            const updated = { ...prev };
            delete updated[userId];
            return updated;
          });
        } else {
          console.log("üü° Server data not yet updated, keeping local update");
        }
      }, 2000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 2 —Å–µ–∫—É–Ω–¥
    } else {
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      setLocalFriendshipUpdates((prev) => {
        const updated = { ...prev };
        delete updated[userId];
        return updated;
      });
      showError(result.message);
    }
  };

  const handleAcceptRequest = async (friendshipId, userId) => {
    // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    setLocalFriendshipUpdates((prev) => ({
      ...prev,
      [userId]: "accepted",
    }));

    const result = await onAcceptFriendRequest(friendshipId);
    if (result.success) {
      showSuccess("–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç");
      // –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
      await Promise.all([
        fetchAllUsers(),
        loadFriends(),
        loadPendingRequests(),
      ]);
      setLocalFriendshipUpdates((prev) => {
        const updated = { ...prev };
        delete updated[userId];
        return updated;
      });
    } else {
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setLocalFriendshipUpdates((prev) => {
        const updated = { ...prev };
        delete updated[userId];
        return updated;
      });
      showError(result.message);
    }
  };

  const handleDeclineRequest = async (friendshipId, userId) => {
    // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    setLocalFriendshipUpdates((prev) => ({
      ...prev,
      [userId]: "none",
    }));

    const result = await onDeclineFriendRequest(friendshipId);
    if (result.success) {
      showSuccess("–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω");
      // –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      await Promise.all([fetchAllUsers(), loadPendingRequests()]);
      setLocalFriendshipUpdates((prev) => {
        const updated = { ...prev };
        delete updated[userId];
        return updated;
      });
    } else {
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setLocalFriendshipUpdates((prev) => {
        const updated = { ...prev };
        delete updated[userId];
        return updated;
      });
      showError(result.message);
    }
  };

  return (
    <Dialog open={open} onClose={handleClose} maxWidth="md" fullWidth>
      <DialogTitle>–ù–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π</DialogTitle>
      <DialogContent>
        <Box sx={{ mb: 2 }}>
          <TextField
            fullWidth
            label="–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            variant="outlined"
            value={userSearch}
            onChange={onUserSearchChange}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
          />
        </Box>

        {usersLoading && <LinearProgress sx={{ mb: 2 }} />}

        {usersError && (
          <Alert severity="error" sx={{ mb: 2 }}>
            {usersError}
          </Alert>
        )}

        {!usersLoading && paginatedUsers.length === 0 && (
          <Typography
            variant="body2"
            color="text.secondary"
            sx={{ textAlign: "center", py: 4 }}
          >
            {userSearch
              ? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
              : "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"}
          </Typography>
        )}

        {!usersLoading && paginatedUsers.length > 0 && (
          <List>
            {paginatedUsers.map((user) => {
              const friendshipStatus = getFriendshipStatus(user);

              return (
                <ListItem
                  key={user.id}
                  sx={{
                    border: "1px solid",
                    borderColor: "divider",
                    borderRadius: 1,
                    mb: 1,
                    p: 2,
                  }}
                >
                  <Box
                    sx={{
                      display: "flex",
                      alignItems: "center",
                      justifyContent: "space-between",
                      width: "100%",
                    }}
                  >
                    <Box sx={{ display: "flex", alignItems: "center" }}>
                      <Avatar
                        src={user.avatar}
                        sx={{ mr: 2, width: 50, height: 50 }}
                      >
                        {user.name.charAt(0)}
                      </Avatar>
                      <Box>
                        <Typography variant="h6">{user.name}</Typography>
                        <Typography variant="body2" color="text.secondary">
                          –£—Ä–æ–≤–µ–Ω—å {user.level} ‚Ä¢{" "}
                          {new Date(user.registrationDate).toLocaleDateString(
                            "ru-RU"
                          )}
                        </Typography>
                        {user.isPrivate && (
                          <Chip
                            label="–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å"
                            size="small"
                            color="warning"
                            variant="outlined"
                          />
                        )}
                      </Box>
                    </Box>

                    <Box sx={{ display: "flex", justifyContent: "flex-end" }}>
                      {friendshipStatus?.status === "none" && (
                        <Button
                          variant="outlined"
                          size="small"
                          startIcon={<PersonAdd />}
                          onClick={() => handleSendRequest(user.id)}
                        >
                          –î–æ–±–∞–≤–∏—Ç—å –≤ –¥—Ä—É–∑—å—è
                        </Button>
                      )}
                      {friendshipStatus?.status === "sent_request" && (
                        <Button
                          variant="outlined"
                          size="small"
                          disabled
                          color="warning"
                        >
                          –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
                        </Button>
                      )}
                      {friendshipStatus?.status === "received_request" && (
                        <Box sx={{ display: "flex", gap: 1 }}>
                          <Button
                            variant="contained"
                            size="small"
                            color="success"
                            onClick={() =>
                              handleAcceptRequest(
                                friendshipStatus.friendshipId,
                                user.id
                              )
                            }
                          >
                            –ü—Ä–∏–Ω—è—Ç—å
                          </Button>
                          <Button
                            variant="outlined"
                            size="small"
                            color="error"
                            onClick={() =>
                              handleDeclineRequest(
                                friendshipStatus.friendshipId,
                                user.id
                              )
                            }
                          >
                            –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                          </Button>
                        </Box>
                      )}
                      {friendshipStatus?.status === "accepted" && (
                        <Chip
                          label="–£–∂–µ –¥—Ä—É–∑—å—è"
                          size="small"
                          color="success"
                          icon={<Check />}
                        />
                      )}
                    </Box>
                  </Box>
                </ListItem>
              );
            })}
          </List>
        )}

        {/* Pagination */}
        {totalUsersPages > 1 && (
          <Box
            sx={{
              display: "flex",
              justifyContent: "center",
              mt: 3,
            }}
          >
            <Pagination
              count={totalUsersPages}
              page={usersPage}
              onChange={onUsersPageChange}
              color="primary"
              size="large"
              showFirstButton
              showLastButton
            />
          </Box>
        )}
      </DialogContent>
    </Dialog>
  );
};

export default FindFriendsDialog;
